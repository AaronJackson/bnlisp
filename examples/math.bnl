;; ROW MAJOR MODE MATRIX STUFF

;; matrix definition
;;        w h elems
(SETQ M '(2 2 (1 0 0 1)))

;; there is no multiply prim atm
(SETQ * (LAMBDA (A B)
		((LAMBDA (C Z A B)
			 (WHILE (NOT (= C B))
				(SETQ C (+ C 1))
				(SETQ Z (+ Z A)))
			 Z)
		 0 0 A B)))

(SETQ MATRIX-NUMEL
      (LAMBDA (MAT)
	      (* (CAR MAT) (CAR (CDR MAT)))))

(SETQ MATRIX-PRINT
      (LAMBDA (MAT)
	      (SETQ count (MATRIX-NUMEL MAT))
	      (SETQ c 0)
	      (SETQ cc 0)
	      (SETQ tail (CAR (CDR (CDR MAT))))
	      (WHILE (NOT (= c count))
		     (SETQ c (+ c 1))
		     (IF (= cc (CAR MAT))
		     	 (PROGN
				 (SETQ cc 0)
				 (PRINC "\n"))
			 ())
		     (SETQ cc (+ cc 1))
		     (PRINC (CAR tail))
		     (PRINC "\t")
		     (SETQ tail (CDR tail)))
	      (PRINC "\n")
	      MAT))

(SETQ MATRIX-GET-IJ
      (LAMBDA (MAT I J)
	      (SETQ COUNT 0)
	      (SETQ IDX (+ (* I (CAR MAT)) J))
	      (SETQ TAIL (CAR (CDR (CDR MAT))))
	      (WHILE (NOT (= COUNT IDX))
		     (SETQ COUNT (+ COUNT 1))
		     (SETQ TAIL (CDR TAIL)))
	      (CAR TAIL)))

(SETQ APPEND (LAMBDA (A B)
		     (IF (EQ A NIL)
			 B
			 (CONS (CAR A) (APPEND (CDR A) B)))))

(SETQ MATRIX-TRANSPOSE
      (LAMBDA (MAT)
	      (SETQ I 0)
	      (SETQ M (CAR (CDR (CDR MAT))))
	      (SETQ OUT ())
	      (WHILE (NOT (= I (CAR MAT)))
		     (SETQ J 0)
		     (WHILE (NOT (= J (CAR (CDR MAT))))
			    (SETQ OUT (APPEND OUT (CONS (MATRIX-GET-IJ MAT J I) NIL)))
			    (SETQ J (+ J 1)))
		     (SETQ I (+ I 1)))
	      (CONS (CAR (CDR MAT)) (CONS (CAR MAT) (CONS OUT NIL) NIL))))

(SETQ MATRIX-GET-ROW
      (LAMBDA (M R) ;; get row R of matrix M
	      (SETQ OUT ())
	      (SETQ COUNT 0)
	      (WHILE (NOT (= COUNT (CAR M)))
		     (SETQ OUT (APPEND OUT (CONS (MATRIX-GET-IJ M R COUNT) NIL)))
		     (SETQ COUNT (+ COUNT 1)))
	      OUT))
;;	      (CONS (CAR M) (CONS 1 (CONS OUT NIL) NIL))))

(SETQ MATRIX-GET-COL
      (LAMBDA (M J) ;; get col J of matrix M
	      (SETQ OUT ())
	      (SETQ COUNT 0)
	      (WHILE (NOT (= COUNT (CAR (CDR M))))
		     (SETQ OUT (APPEND OUT (CONS (MATRIX-GET-IJ M COUNT J) NIL)))
		     (SETQ COUNT (+ COUNT 1)))
	      OUT))

(SETQ SUM
      (LAMBDA (V)
	      (SETQ S 0)
	      (SETQ TAIL V)
	      (WHILE (NOT (EQ TAIL NIL))
		     (SETQ S (+ S (CAR TAIL)))
		     (SETQ TAIL (CDR TAIL)))
      S))


;;	      	      (CONS 1 (CONS (CAR (CDR M))  (CONS OUT NIL) NIL))))
(SETQ DOT-PRODUCT
      (LAMBDA (A B)
	      (SETQ TAIL-A A)
	      (SETQ TAIL-B B)
	      (SETQ OUT ())
	      (WHILE (NOT (EQ TAIL-A NIL))
		     (SETQ OUT (APPEND OUT (CONS (* (CAR TAIL-A) (CAR TAIL-B)) NIL)))
		     (SETQ TAIL-A (CDR TAIL-A))
		     (SETQ TAIL-B (CDR TAIL-B)))
	      (SUM OUT)))


;; assumes dimensions A[x,y] = B[y,z]
(SETQ MATRIX-MULTIPLY
      (LAMBDA (A B)
	      (SETQ OUT-W (CAR (CDR A)))
	      (SETQ OUT-H (CAR B))
	      (SETQ OUT ())
	      (SETQ J 0)
	      (WHILE (NOT (= J OUT-H))
		     (SETQ I 0)
		     (WHILE (NOT (= I OUT-W))
			    (SETQ OUT
				  (APPEND OUT (CONS (DOT-PRODUCT
						     (MATRIX-GET-ROW A I)
						     (MATRIX-GET-COL B J)) NIL)))
			    (SETQ I (+ I 1)))
		     (SETQ J (+ J 1))
		     )
	      (CONS OUT-W (CONS OUT-H (CONS OUT NIL)))))

(SETQ M '(2 3 (1 2 3 4 5 6)))
(PRINC "Here is matrix M:\n")
(MATRIX-PRINT M)
(PRINC "\nHere is the transpose of M:\n")
(MATRIX-PRINT (MATRIX-TRANSPOSE M))

(PRINC "\n\n\n")

(SETQ V '(1 5 (1 2 3 4 5)))
(PRINC "Here is column vector V:\n")
(MATRIX-PRINT V)
(PRINC "\n... and here is its transpose:\n")
(MATRIX-PRINT (MATRIX-TRANSPOSE V))

(PRINC "\n\n\n")
(SETQ M '(2 3 (1 2 3 4 5 6)))

(MATRIX-PRINT M)
(PRINT M)
(PRINT (MATRIX-GET-ROW M 2))
(PRINT (MATRIX-GET-ROW M 0))

(PRINC "\n\n\n")
(PRINT (DOT-PRODUCT (MATRIX-GET-ROW M 2) (MATRIX-GET-ROW M 0)))
(PRINC "\n")
M
(MATRIX-PRINT (MATRIX-MULTIPLY M (MATRIX-TRANSPOSE M)))



;; $ cat math.bnl | ./lisp  -s
;; welcome to bnlisp
;; Here is matrix M:
;; 1	2
;; 3	4
;; 5	6
;;
;; Here is the transpose of M:
;; 1	3	5
;; 2	4	6
